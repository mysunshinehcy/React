{"version":3,"sources":["components/Header.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","homeLink","Home","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","age","initialAge","status","initialName","setTimeout","setState","console","log","greet","changeLink","event","target","value","nextProps","nextState","prevProps","prevStatus","_this2","name","onClick","onMakeOlder","bind","handleGreet","type","defaultValue","onChange","onHandleChange","onChangeLink","Component","App","homeMounted","alert","newName","homeCmp","Home_Home","user","hobbies","onGreet","onChangeLinkName","components_Header","onChangeHomeMounted","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNA+BeA,EAZF,SAACC,GACZ,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6BACXH,EAAAC,EAAAC,cAAA,UAAKH,EAAMK,cCrBRC,cAEnB,SAAAA,EAAYN,GAAM,IAAAO,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IAMhBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMV,KACDc,MAAM,CACTC,IAAIf,EAAMgB,WACVC,OAAO,EACPZ,SAASL,EAAMkB,aAGjBC,WAAW,WACTZ,EAAKa,SAAS,CACZH,OAAO,KAET,KACFI,QAAQC,IAAI,eAlBIf,6EAqBhBG,KAAKU,SAAS,CACZL,IAAIL,KAAKI,MAAMC,IAAI,0CAMrBL,KAAKV,MAAMuB,MAAMb,KAAKI,MAAMC,4CAG5BL,KAAKV,MAAMwB,WAAWd,KAAKI,MAAMT,iDAGpBoB,GACbf,KAAKU,SAAS,CACZf,SAASoB,EAAMC,OAAOC,qDAKxBN,QAAQC,IAAI,sEAIZD,QAAQC,IAAI,2EAGYM,GACxBP,QAAQC,IAAI,0BAA2BM,iDAGnBA,EAAUC,GAE9B,OADAR,QAAQC,IAAI,4BAA6BM,EAAUC,GAC7B,IAAnBA,EAAUZ,mDAMKW,EAAUC,GAC1BR,QAAQC,IAAI,0BAA2BM,EAAUC,8CAGlCC,EAAUC,GACzBV,QAAQC,IAAI,yBAAyBQ,EAAUC,kDAIjDV,QAAQC,IAAI,4DAEL,IAAAU,EAAAtB,KAGP,OADAW,QAAQC,IAAI,UAEVrB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6BACXH,EAAAC,EAAAC,cAAA,2BAAmBO,KAAKV,MAAMiC,KAA9B,gBAAiDvB,KAAKI,MAAMC,KAC5Dd,EAAAC,EAAAC,cAAA,SAAIO,KAAKI,MAAMG,QACfhB,EAAAC,EAAAC,cAAA,UAAQ+B,QAASxB,KAAKyB,YAAYC,KAAK1B,MAAON,UAAU,mBAAxD,iBACAH,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAAA,UAAQ+B,QAASxB,KAAK2B,YAAYD,KAAK1B,MAAON,UAAU,mBAAxD,SACAH,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SAAOmC,KAAK,OACLC,aAAc7B,KAAKV,MAAMkB,YACzBS,MAAOjB,KAAKI,MAAMI,YAClBsB,SAAU,SAACf,GAAD,OAASO,EAAKS,eAAehB,MAC9CxB,EAAAC,EAAAC,cAAA,UAAQ+B,QAASxB,KAAKgC,aAAaN,KAAK1B,MAAON,UAAU,mBAAzD,iCA3FgBuC,aCoEnBC,qBAhEX,SAAAA,IAAa,IAAArC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAkC,IACTrC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAoC,GAAA/B,KAAAH,QACKI,MAAM,CACPT,SAAS,OACTwC,aAAY,GAJPtC,uEAOLQ,GACJ+B,MAAM/B,4CAEOgC,GACbrC,KAAKU,SAAS,CACVf,SAAS0C,kDAKbrC,KAAKU,SAAS,CACVyB,aAAanC,KAAKI,MAAM+B,+CAI5B,IAIIG,EAAQ,GAUZ,OATGtC,KAAKI,MAAM+B,cACVG,EAAS/C,EAAAC,EAAAC,cAAC8C,EAAD,CAAMhB,KAAM,MACNjB,WAAY,GACZkC,KARR,CACPjB,KAAK,OACLkB,QAAQ,CAAC,SAAS,YAOH5B,MAAOb,KAAK0C,QACZ5B,WAAYd,KAAK2C,iBAAiBjB,KAAK1B,MACvCQ,YAAaR,KAAKI,MAAMT,YAIvCJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6BACXH,EAAAC,EAAAC,cAACmD,EAAD,CAAQjD,SAAUK,KAAKI,MAAMT,aAGrCJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6BACXH,EAAAC,EAAAC,cAAA,uBAGRF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6BACL4C,IAGd/C,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6BACZH,EAAAC,EAAAC,cAAA,UAAQ+B,QAASxB,KAAK6C,oBAAoBnB,KAAK1B,MAAON,UAAU,mBAAhE,sCAzDLuC,cCMEa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7D,EAAAC,EAAAC,cAAC4D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.14d5b2fe.chunk.js","sourcesContent":["// import React, { Component } from 'react';\r\n\r\n\r\n// export default class Header extends Component {\r\n//   render() {\r\n//     return (\r\n//       <div className=\"container\">\r\n//           <div className=\"row\">\r\n//               <div className=\"col-xs-1 col-xs-offset-11\">\r\n//                   <h1>Header</h1>\r\n//               </div>\r\n//           </div>\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n\r\nimport React from 'react';\r\n\r\nconst Header=(props)=>{\r\n  return (\r\n      <div className=\"container\">\r\n          <div className=\"row\">\r\n              <div className=\"col-xs-1 col-xs-offset-11\">\r\n                  <h1>{props.homeLink}</h1>\r\n              </div>\r\n          </div>\r\n      </div>\r\n  )\r\n}\r\n\r\nexport default Header;\r\n\r\n/**\r\n * 1.无需state，即不处理用户的输入，组件的所有的数据都是依赖props传入的\r\n * 2.不需要用到声明周期函数\r\n * \r\n * 好处:\r\n * 1.不需要声明类，可以避免大量的譬如extends或者constructor这样的代码\r\n * \r\n * 2.不需要显示声明this关键字，在ES6的类声名类中往往需要将函数的this关键字绑定到当前作用域，而因为函数式声明的特性，我们不需要再强制绑定\r\n */","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class Home extends Component {\r\n  /**Home 是一个class，里面是一个对象 */\r\n  constructor(props){\r\n    /** constructor是一个初始化的函数，，每一次创建这个对象首先执行这个函数\r\n     * constructor是一个构造方法，是一个创建这个类的对象的时候的初始化方法\r\n     * super()是执行父类构造函数的方法\r\n     * props是从父对象传递过来的\r\n     */\r\n    super(props);\r\n    this.state={\r\n      age:props.initialAge,\r\n      status:0,\r\n      homeLink:props.initialName,\r\n      //initialName:props.initialName  加上这个默认值，input居然不能编辑了\r\n    }\r\n    setTimeout(()=>{\r\n      this.setState({\r\n        status:1\r\n      })\r\n    },3000)\r\n    console.log(\"constructor\");\r\n  }\r\n  onMakeOlder(){\r\n    this.setState({\r\n      age:this.state.age+3\r\n    })\r\n  }\r\n  //将子组件的数据传递给父组件\r\n  handleGreet(){\r\n    //这里是从父组件传递过来的方法\r\n    this.props.greet(this.state.age);\r\n  }\r\n  onChangeLink(){\r\n    this.props.changeLink(this.state.homeLink);\r\n  }\r\n\r\n  onHandleChange(event){\r\n    this.setState({\r\n      homeLink:event.target.value\r\n    })\r\n  }\r\n\r\n  componentWillMount(){\r\n    console.log(\"1.Component will mount\");\r\n  }\r\n\r\n  componentDidMount(){\r\n    console.log(\"2.Component did mount\");\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    console.log('3.Component will update', nextProps);\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps,nextState){\r\n    console.log('4.Component should update', nextProps,nextState);\r\n    if(nextState.status===1){\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  componentWillUpdate(nextProps,nextState){\r\n      console.log('5.Component will update', nextProps,nextState);\r\n  }\r\n\r\n  componentDidUpdate(prevProps,prevStatus){\r\n      console.log('6.Component did update',prevProps,prevStatus);\r\n  }\r\n\r\n  componentWillUnmount(){\r\n    console.log('7.Component did Unmount');\r\n  }\r\n  render() {\r\n    //console.log(this);\r\n    console.log(\"render\");\r\n    return (\r\n      <div className=\"container\">\r\n          <div className=\"row\">\r\n              <div className=\"col-xs-1 col-xs-offset-11\">\r\n                  <div>Your name is {this.props.name},your age is {this.state.age}</div>\r\n                  <p>{this.state.status}</p>  \r\n                  <button onClick={this.onMakeOlder.bind(this)} className='btn btn-primary'>Make me older</button>\r\n                  <hr/>\r\n                  {/* <button onClick={this.props.greet} className=\"btn btn-primary\">Greet</button> */}\r\n                  <button onClick={this.handleGreet.bind(this)} className=\"btn btn-primary\">Greet</button>\r\n                  <hr/>\r\n                  <input type=\"text\" \r\n                         defaultValue={this.props.initialName} \r\n                         value={this.state.initialName} \r\n                         onChange={(event)=>this.onHandleChange(event)}/>\r\n                  <button onClick={this.onChangeLink.bind(this)} className=\"btn btn-primary\">Changed Header Link</button>\r\n              </div>\r\n          </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nHome.propTypes={\r\n  name:PropTypes.string,\r\n  age:PropTypes.number,\r\n  user:PropTypes.object,\r\n  greet:PropTypes.func,\r\n  initialName:PropTypes.string\r\n}","import React, { Component } from 'react';\r\n\r\nimport Header from './components/Header';\r\nimport Home from './components/Home'\r\nimport './App.css';\r\n//生命周期:https://reactjs.org/docs/react-component.html\r\nclass App extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            homeLink:\"Home\",\r\n            homeMounted:true\r\n        }\r\n    }\r\n    onGreet(age){\r\n        alert(age);\r\n    } \r\n    onChangeLinkName(newName){\r\n        this.setState({\r\n            homeLink:newName\r\n        })\r\n    }\r\n\r\n    onChangeHomeMounted(){\r\n        this.setState({\r\n            homeMounted:!this.state.homeMounted,\r\n        })\r\n    }\r\n    render() {\r\n        const user={\r\n            name:\"Anna\",\r\n            hobbies:[\"Sports\",\"Reading\"]\r\n        }\r\n        let homeCmp=\"\";\r\n        if(this.state.homeMounted){\r\n            homeCmp=(<Home name={\"Max\"} \r\n                           initialAge={12} \r\n                           user={user} \r\n                           greet={this.onGreet} \r\n                           changeLink={this.onChangeLinkName.bind(this)}\r\n                           initialName={this.state.homeLink}/>\r\n                           );\r\n        }  \r\n        return ( \r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-xs-1 col-xs-offset-11\">\r\n                        <Header homeLink={this.state.homeLink}/>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-xs-1 col-xs-offset-11\">\r\n                        <h1>Hello!!</h1>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-xs-1 col-xs-offset-11\">\r\n                             {homeCmp}   \r\n                    </div>\r\n                </div>\r\n                <hr/>\r\n                <div className=\"row\">\r\n                    <div className=\"col-xs-1 col-xs-offset-11\">         \r\n                       <button onClick={this.onChangeHomeMounted.bind(this)} className=\"btn btn-primary\">(Un)mount Home Component</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}